name: CONDITION API CI

on:
  pull_request:
    branches:
      - main
    paths:
      - "condition-api/**"

defaults:
  run:
    shell: bash
    working-directory: ./condition-api

jobs:
  setup-job:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2
      - run: "true"

  linting:
    needs: setup-job
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        python-version: [3]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libsasl2-dev libldap2-dev libssl-dev --yes
          make setup
      - name: Lint with pylint
        id: pylint
        run: |
          make pylint
      - name: Lint with flake8
        id: flake8
        run: |
          make flake8


  testing:
     needs: setup-job
     env:
       DATABASE_TEST_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
       JWT_OIDC_TEST_ISSUER: "http://localhost:8081/auth/realms/demo"
       JWT_OIDC_TEST_WELL_KNOWN_CONFIG: "http://localhost:8081/auth/realms/demo/.well-known/openid-configuration"
       JWT_OIDC_TEST_ALGORITHMS: "RS256"
       JWT_OIDC_TEST_AUDIENCE: "submit"
       JWT_OIDC_TEST_CLIENT_SECRET: "1111111111"
       JWT_OIDC_TEST_JWKS_CACHE_TIMEOUT: "6000"
       KEYCLOAK_TEST_ADMIN_CLIENTID: "met-admin"
       KEYCLOAK_TEST_ADMIN_SECRET: "2222222222"
       KEYCLOAK_TEST_AUTH_AUDIENCE: "epic-submit"
       KEYCLOAK_TEST_AUTH_CLIENT_SECRET: "1111111111"
       KEYCLOAK_TEST_BASE_URL: "http://localhost:8081"
       KEYCLOAK_TEST_REALMNAME: "demo"
       USE_TEST_KEYCLOAK_DOCKER: "YES"

     runs-on: ubuntu-22.04

     strategy:
       matrix:
         python-version: [3]

     services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

     steps:
       - uses: actions/checkout@v4
         with:
           fetch-depth: 0
       - name: Set up Python ${{ matrix.python-version }}
         uses: actions/setup-python@v4
         with:
           python-version: ${{ matrix.python-version }}
       - name: Install dependencies
         run: |
           make setup
       - name: Test
         id: test
         run: |
           make test

  build:
    # needs: PyTest
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3]
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build
        run: |
          docker build . -t condition-api
