"""add_condition_type

Revision ID: 1eb403b982a4
Revises: d909569f8c4e
Create Date: 2025-08-29 13:35:05.915295

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1eb403b982a4'
down_revision = 'd909569f8c4e'
branch_labels = None
depends_on = None


condition_type_enum = sa.Enum("ADD", "AMEND", name="condition_type_enum")

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    condition_type_enum.create(op.get_bind(), checkfirst=True)

    with op.batch_alter_table('conditions', schema='condition') as batch_op:
        batch_op.add_column(
            sa.Column('condition_type',
                      sa.Enum('ADD', 'AMEND', name='condition_type_enum'),
                      nullable=True)
        )

    # Set values based on amended_document_id
    op.execute("""
        UPDATE condition.conditions
        SET condition_type = CASE
            WHEN amended_document_id IS NULL THEN 'ADD'::condition_type_enum
            ELSE 'AMEND'::condition_type_enum
        END
    """)

    with op.batch_alter_table('conditions', schema='condition') as batch_op:
        batch_op.alter_column('condition_type', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('conditions', schema='condition') as batch_op:
        batch_op.drop_column('condition_type')

    # Drop the enum type as well (if you want clean rollback)
    op.execute("DROP TYPE condition_type_enum")

    # ### end Alembic commands ###
